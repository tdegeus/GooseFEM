language: cpp
dist: trusty
env:
matrix:
  fast_finish: true
  include:
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
            - python3
      env: COMPILER=gcc GCC=5
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
            - python3
      env: COMPILER=gcc GCC=6
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
            - python3
      env: COMPILER=gcc GCC=7
env:
  global:
    - MINCONDA_VERSION="latest"
    - MINCONDA_LINUX="Linux-x86_64"
    - MINCONDA_OSX="MacOSX-x86_64"
before_install:
    - sudo apt-get -qq update
    - sudo apt-get install -y texlive-base texlive-latex-base texlive-latex-extra texlive-fonts-recommended texlive-fonts-extra
    - sudo apt-get install dvipng
    - |
      # Configure build variables
      if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        if [[ "$COMPILER" == "gcc" ]]; then
          export CXX=g++-$GCC CC=gcc-$GCC;
        fi
        if [[ "$COMPILER" == "clang" ]]; then
          export CXX=clang++-$CLANG CC=clang-$CLANG;
        fi
      elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        export CXX=clang++ CC=clang;
      fi
install:
    # Define the version of miniconda to download
    - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        MINCONDA_OS=$MINCONDA_LINUX;
      elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        MINCONDA_OS=$MINCONDA_OSX;
      fi
    - wget "http://repo.continuum.io/miniconda/Miniconda3-$MINCONDA_VERSION-$MINCONDA_OS.sh" -O miniconda.sh;
    - bash miniconda.sh -b -p $HOME/miniconda
    - export PATH="$HOME/miniconda/bin:${PATH}"
    - export INCLUDE_PATH="$HOME/miniconda/include:${INCLUDE_PATH}"
    - hash -r
    - conda config --set always_yes yes --set changeps1 no
    - conda update -q conda
    - conda install cmake -c conda-forge
    - conda install xtl -c conda-forge
    - conda install xsimd -c conda-forge
    - conda install xtensor -c conda-forge
    - pip install numpy matplotlib GooseMPL pybind11 pyxtensor
    - export MPLBACKEND=Agg
    - python -c "import GooseMPL; GooseMPL.copy_style()"
    # store relevant
    - root_dir="${PWD}"
    - build_dir="${PWD}/build"
    - lib_dir="${PWD}/libs"
    - mkdir "${build_dir}"
    - mkdir "${lib_dir}"
    # install Eigen
    - rm -r "${lib_dir}"
    - mkdir "${lib_dir}"
    - cd "${lib_dir}"
    - git clone https://github.com/eigenteam/eigen-git-mirror.git
    - cd eigen-git-mirror
    - mkdir build
    - cd build
    - cmake .. -DBUILD_TESTING=OFF
    - sudo make install
    # install HighFive
    - rm -r "${lib_dir}"
    - mkdir "${lib_dir}"
    - cd "${lib_dir}"
    - git clone https://github.com/BlueBrain/HighFive.git
    - cd HighFive
    - mkdir build
    - cd build
    - cmake .. -DHIGHFIVE_EXAMPLES=OFF -DUSE_BOOST=OFF
    - sudo make install
    # install Catch2
    - rm -r "${lib_dir}"
    - mkdir "${lib_dir}"
    - cd "${lib_dir}"
    - git clone https://github.com/catchorg/Catch2.git
    - cd Catch2
    - mkdir build
    - cd build
    - cmake .. -DCATCH_BUILD_TESTING=OFF
    - sudo make install
    # install GMatElastic
    - rm -r "${lib_dir}"
    - mkdir "${lib_dir}"
    - cd "${lib_dir}"
    - git clone https://github.com/tdegeus/GMatElastic.git
    - cd GMatElastic
    - mkdir build
    - cd build
    - cmake ..
    - sudo make install
    - cd ..
    - python3 setup.py build
    - python3 setup.py install
    # make Python library
    - cd "${root_dir}"
    - python3 setup.py build
    - python3 setup.py install
    # make test-cases and examples
    - rm -r "${build_dir}"
    - mkdir "${build_dir}"
    - cd "${build_dir}"
    - cmake .. -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON
    - make
script:
    # run tests
    - cd "${build_dir}/test"
    - ./test
    # run examples
    - cd "${build_dir}/docs/examples"
    - ./statics_FixedDisplacements_LinearElastic_example
    - python3 statics_FixedDisplacements_LinearElastic_plot.py
    - python3 statics_FixedDisplacements_LinearElastic_example.py
    - ./statics_FixedDisplacements_LinearElastic_manual_partition
    - python3 statics_FixedDisplacements_LinearElastic_plot.py
    - python3 statics_FixedDisplacements_LinearElastic_manual_partition.py
